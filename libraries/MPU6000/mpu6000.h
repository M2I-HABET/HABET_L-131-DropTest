#ifndef MPU6000_H_
#define MPU6000_H_

// MPU6000 Chip Select Pin (Arduino Number System)
#define MPU6000_CHIP_SELECT			53

// MPU6000 Registers
#define MPU6000_REG_WHOAMI			0x75
#define	MPU6000_REG_SMPLRT_DIV		0x19
#define MPU6000_REG_CONFIG			0x1A
#define MPU6000_REG_GYRO_CONFIG		0x1B
#define MPU6000_REG_ACCEL_CONFIG	0x1C
#define MPU6000_REG_INT_PIN_CFG		0x37
#define	MPU6000_REG_INT_ENABLE		0x38 
#define MPU6000_REG_ACCEL_X_H		0x3B
#define MPU6000_REG_ACCEL_X_L		0x3C
#define MPU6000_REG_ACCEL_Y_H		0x3D
#define MPU6000_REG_ACCEL_Y_L		0x3E
#define MPU6000_REG_ACCEL_Z_H		0x3F
#define MPU6000_REG_ACCEL_Z_L		0x40
#define MPU6000_REG_TEMP_H			0x41
#define MPU6000_REG_TEMP_L			0x42
#define MPU6000_REG_GYRO_X_H		0x43
#define	MPU6000_REG_GYRO_X_L		0x44
#define MPU6000_REG_GYRO_Y_H		0x45
#define	MPU6000_REG_GYRO_Y_L		0x46
#define MPU6000_REG_GYRO_Z_H		0x47
#define	MPU6000_REG_GYRO_Z_L		0x48
#define MPU6000_REG_USER_CTRL		0x6A
#define	MPU6000_REG_PWR_MGMT_1		0x6B
#define	MPU6000_REG_PWR_MGMT_2		0x6C

// MPU6000 Configuration Bits 
#define MPU6000_BIT_SLEEP			0x40
#define MPU6000_BIT_H_RESET			0x80
#define MPU6000_BITS_CLKSEL			0x07
#define MPU6000_CLK_SEL_PLLGYROX	0x01
#define MPU6000_CLK_SEL_PLLGYROZ	0x03
#define MPU6000_EXT_SYNC_GYROX		0x02
#define MPU6000_BITS_FS_250DPS		0x00
#define MPU6000_BITS_FS_500DPS		0x08
#define MPU6000_BITS_FS_1000DPS		0x10
#define MPU6000_BITS_FS_2000DPS		0x18
#define MPU6000_BITS_FS_MASK		0x18
#define MPU6000_BITS_DLPF_CFG_256HZ_NOLPF2  0x00
#define MPU6000_BITS_DLPF_CFG_188HZ	0x01
#define MPU6000_BITS_DLPF_CFG_98HZ	0x02
#define MPU6000_BITS_DLPF_CFG_42HZ	0x03
#define MPU6000_BITS_DLPF_CFG_20HZ	0x04
#define MPU6000_BITS_DLPF_CFG_10HZ	0x05
#define MPU6000_BITS_DLPF_CFG_5HZ	0x06
#define MPU6000_BITS_DLPF_CFG_2100HZ_NOLPF  0x07
#define MPU6000_BITS_DLPF_CFG_MASK	0x07
#define	MPU6000_BIT_INT_ANYRD_2CLEAR	0x10
#define	MPU6000_BIT_RAW_RDY_EN		0x01
#define	MPU6000_BIT_I2C_IF_DIS		0x10

typedef struct MPU6000_RAW_DATA {
	int x;
	int y;
	int z;
} MPU6000_RAW_DATA;

class MPU6000 {

public:
	MPU6000();
	void init();
	
	MPU6000_RAW_DATA getRawAccelData();
	MPU6000_RAW_DATA getRawGyroData();
	int getRawTemperature();
	
private:
	short readRegister(short reg);
	void writeRegister(short reg, short val);
};

#endif